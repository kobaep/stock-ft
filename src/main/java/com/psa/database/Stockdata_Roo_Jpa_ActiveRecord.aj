// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.psa.database;

import com.psa.database.Stockdata;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Stockdata_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Stockdata.entityManager;
    
    public static final List<String> Stockdata.fieldNames4OrderClauseFilter = java.util.Arrays.asList("symbol", "closeVal", "open1", "open2", "high", "low", "lastVal", "buyVol", "sellVol", "buyVal", "sellVal", "tval", "tvol", "askV1", "askV2", "bidV1", "bidV2");
    
    public static final EntityManager Stockdata.entityManager() {
        EntityManager em = new Stockdata().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Stockdata.countStockdatas() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Stockdata o", Long.class).getSingleResult();
    }
    
    public static List<Stockdata> Stockdata.findAllStockdatas() {
        return entityManager().createQuery("SELECT o FROM Stockdata o", Stockdata.class).getResultList();
    }
    
    public static List<Stockdata> Stockdata.findAllStockdatas(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Stockdata o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Stockdata.class).getResultList();
    }
    
    public static Stockdata Stockdata.findStockdata(Long id) {
        if (id == null) return null;
        return entityManager().find(Stockdata.class, id);
    }
    
    public static List<Stockdata> Stockdata.findStockdataEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Stockdata o", Stockdata.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Stockdata> Stockdata.findStockdataEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Stockdata o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Stockdata.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Stockdata.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Stockdata.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Stockdata attached = Stockdata.findStockdata(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Stockdata.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Stockdata.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Stockdata Stockdata.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Stockdata merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static Stockdata Stockdata.findBySymbol(String symbol) {
        EntityManager em = Stockdata.entityManager();
        Criteria c = ((Session)em.getDelegate()).createCriteria(Stockdata.class);
        Criterion case1 = Restrictions.eq("symbol", symbol);
        c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        c.add(case1);
        return (Stockdata)c.list().get(0);
    }
    
}
