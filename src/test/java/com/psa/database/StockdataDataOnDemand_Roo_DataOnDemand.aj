// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.psa.database;

import com.psa.database.Stockdata;
import com.psa.database.StockdataDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect StockdataDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StockdataDataOnDemand: @Component;
    
    private Random StockdataDataOnDemand.rnd = new SecureRandom();
    
    private List<Stockdata> StockdataDataOnDemand.data;
    
    public Stockdata StockdataDataOnDemand.getNewTransientStockdata(int index) {
        Stockdata obj = new Stockdata();
        setAskV1(obj, index);
        setAskV2(obj, index);
        setBidV1(obj, index);
        setBidV2(obj, index);
        setBuyVal(obj, index);
        setBuyVol(obj, index);
        setCloseVal(obj, index);
        setHigh(obj, index);
        setLastVal(obj, index);
        setLow(obj, index);
        setOpen1(obj, index);
        setOpen2(obj, index);
        setSellVal(obj, index);
        setSellVol(obj, index);
        setSymbol(obj, index);
        setTval(obj, index);
        setTvol(obj, index);
        return obj;
    }
    
    public void StockdataDataOnDemand.setAskV1(Stockdata obj, int index) {
        Double askV1 = new Integer(index).doubleValue();
        obj.setAskV1(askV1);
    }
    
    public void StockdataDataOnDemand.setAskV2(Stockdata obj, int index) {
        Double askV2 = new Integer(index).doubleValue();
        obj.setAskV2(askV2);
    }
    
    public void StockdataDataOnDemand.setBidV1(Stockdata obj, int index) {
        Double bidV1 = new Integer(index).doubleValue();
        obj.setBidV1(bidV1);
    }
    
    public void StockdataDataOnDemand.setBidV2(Stockdata obj, int index) {
        Double bidV2 = new Integer(index).doubleValue();
        obj.setBidV2(bidV2);
    }
    
    public void StockdataDataOnDemand.setBuyVal(Stockdata obj, int index) {
        Double buyVal = new Integer(index).doubleValue();
        obj.setBuyVal(buyVal);
    }
    
    public void StockdataDataOnDemand.setBuyVol(Stockdata obj, int index) {
        Double buyVol = new Integer(index).doubleValue();
        obj.setBuyVol(buyVol);
    }
    
    public void StockdataDataOnDemand.setCloseVal(Stockdata obj, int index) {
        Double closeVal = new Integer(index).doubleValue();
        obj.setCloseVal(closeVal);
    }
    
    public void StockdataDataOnDemand.setHigh(Stockdata obj, int index) {
        Double high = new Integer(index).doubleValue();
        obj.setHigh(high);
    }
    
    public void StockdataDataOnDemand.setLastVal(Stockdata obj, int index) {
        Double lastVal = new Integer(index).doubleValue();
        obj.setLastVal(lastVal);
    }
    
    public void StockdataDataOnDemand.setLow(Stockdata obj, int index) {
        Double low = new Integer(index).doubleValue();
        obj.setLow(low);
    }
    
    public void StockdataDataOnDemand.setOpen1(Stockdata obj, int index) {
        Double open1 = new Integer(index).doubleValue();
        obj.setOpen1(open1);
    }
    
    public void StockdataDataOnDemand.setOpen2(Stockdata obj, int index) {
        Double open2 = new Integer(index).doubleValue();
        obj.setOpen2(open2);
    }
    
    public void StockdataDataOnDemand.setSellVal(Stockdata obj, int index) {
        Double sellVal = new Integer(index).doubleValue();
        obj.setSellVal(sellVal);
    }
    
    public void StockdataDataOnDemand.setSellVol(Stockdata obj, int index) {
        Double sellVol = new Integer(index).doubleValue();
        obj.setSellVol(sellVol);
    }
    
    public void StockdataDataOnDemand.setSymbol(Stockdata obj, int index) {
        String symbol = "symbol_" + index;
        obj.setSymbol(symbol);
    }
    
    public void StockdataDataOnDemand.setTval(Stockdata obj, int index) {
        Double tval = new Integer(index).doubleValue();
        obj.setTval(tval);
    }
    
    public void StockdataDataOnDemand.setTvol(Stockdata obj, int index) {
        Double tvol = new Integer(index).doubleValue();
        obj.setTvol(tvol);
    }
    
    public Stockdata StockdataDataOnDemand.getSpecificStockdata(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Stockdata obj = data.get(index);
        Long id = obj.getId();
        return Stockdata.findStockdata(id);
    }
    
    public Stockdata StockdataDataOnDemand.getRandomStockdata() {
        init();
        Stockdata obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Stockdata.findStockdata(id);
    }
    
    public boolean StockdataDataOnDemand.modifyStockdata(Stockdata obj) {
        return false;
    }
    
    public void StockdataDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Stockdata.findStockdataEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Stockdata' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Stockdata>();
        for (int i = 0; i < 10; i++) {
            Stockdata obj = getNewTransientStockdata(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
